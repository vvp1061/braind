<!DOCTYPE html>
<html lang="ru">
<head>

    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Petya the programmer</title>
</head>
<body>
	<div align="center">
    <h2>Warnings&Fatal errors</h2>
    <form method="post">
        <p>Введите число фатальных ошибок:</p>
        <p><input type="number" size="5" name="fatal" value="0"></p>
        <p>Введите число ворнингов:</p>
        <p><input type="number" size="5" name="warn" value="0"></p>
        <input type="submit" value="Отправить">
  </form>
  <br>

<?php
/**
 * Принимаем значения для количества фатальных ошибок и ворнингов из HTML формы
 */
if (!empty($_POST)):
	$fatal = (int) $_POST['fatal'];
	$warn = (int) $_POST['warn'];

	$counter = 0;

	echo ("Количество фатальных ошибок: $fatal<br>Количество ворнингов: $warn<br>");

/**
 * Проверям введенные данные на необходимость дальнейшей обработки, корректность, и возможности исправить программу
 * P.S  Условие <= 1000 из условия задачи
 */

	if (($warn == 0) && ($fatal == 0)) {
		exit('Программа Пети исправна. Действия не требуются');
	}
/**
 * Проверям введенные данные на корректность. Очевидно, что они не могут быть отрицательными
 */
	if (($warn < 0) || ($fatal < 0) || ($warn > 1000)) {
		exit('Некорректно введенные данные.');
	}
/**
 * Легко заметить, что при ситуации, когда мы не можем избавиться от фатальных ошибок (т.е, если их кол-во нечётное)
 * и не можем добавить ещё ворнингов, код исправить невозможно
 */
	if (($fatal % 2 != 0) && ($warn == 0)) {
		exit('Исправить код невозможно.');
	}

/**
 * Описываем 3 функции, которые соответствуют действиям, которые может сделать Петя со своей программой.
 * Счётчик counter для подсчета количества произведенных шагов по устранению проблем
 * (Первое действие не учитываем, поскольку оно не имеет смысла)
 */

	function action_2() {
		global $warn, $fatal, $counter;
		$counter++;
		$warn++;

	}
	function action_3() {
		global $warn, $fatal, $counter;
		$counter++;
		$warn -= 2;
		$fatal++;
	}

	function action_4() {
		global $warn, $fatal, $counter;
		$counter++;
		$fatal -= 2;
	}

/**
 * По задумке, мы должны "накрутить" количество ворнингов до такого чётного количества
 * (поскольку удалять ворнинги мы можем только по 2 шт.), при котором
 * мы сможем убрать все фатальные ошибки.
 * Т.е, мы должны исключить такую ситуацию, когда в результате работы второго цикла while у нас не остаются ворнинги,
 * но остаётся нечетное количество фатальных ошибок (например, 0|3)
 */

	while (($warn % 2 != 0) || (((intdiv($warn, 2)) + $fatal) % 2 != 0)) {
		action_2();
	}
/**
 * Далее удаляем ворнинги, добавляя фатальных ошибки. Т.к в результате работы первого цикла while
 * ворнингов было столько, сколько нужно для дальшейшего удаления фатальных ошибок, дополнительно ничего проверять не приходится
 */

	while ($warn != 0) {
		action_3();
	}
/**
 * Перед третьим циклом while у нас всегда чётное количество фатальных ошибок. В цикле спокойно удалям их
 */
	while ($fatal != 0) {
		action_4();
	}

/**
 * Выводим количество произведенных коммитов
 */

	echo 'Успех! Для исправления багов потребовалось коммитов: ', $counter;
endif;
?>
</div>
</body>
</html>
